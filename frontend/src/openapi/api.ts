/* tslint:disable */
/* eslint-disable */
/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ClubType
 */
export interface ClubType {
    /**
     * 
     * @type {number}
     * @memberof ClubType
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ClubType
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Clubs
 */
export interface Clubs {
    /**
     * 
     * @type {number}
     * @memberof Clubs
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Clubs
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Clubs
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface ClubsWithDate
 */
export interface ClubsWithDate {
    /**
     * 
     * @type {number}
     * @memberof ClubsWithDate
     */
    id?: number;
    /**
     * 
     * @type {ClubsWithDateCalculatorType}
     * @memberof ClubsWithDate
     */
    dates?: ClubsWithDateCalculatorType;
    /**
     * 
     * @type {string}
     * @memberof ClubsWithDate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ClubsWithDate
     */
    uri: string;
}
/**
 * 
 * @export
 * @interface ClubsWithDateCalculatorType
 */
export interface ClubsWithDateCalculatorType {
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    sun: DateCalculatorChildType;
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    mon: DateCalculatorChildType;
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    tue: DateCalculatorChildType;
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    wed: DateCalculatorChildType;
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    thu: DateCalculatorChildType;
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    fri: DateCalculatorChildType;
    /**
     * 
     * @type {DateCalculatorChildType}
     * @memberof ClubsWithDateCalculatorType
     */
    sat: DateCalculatorChildType;
}
/**
 * 
 * @export
 * @interface DateCalculatorChildType
 */
export interface DateCalculatorChildType {
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    sun: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    mon: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    tue: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    wed: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    thu: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    fri: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof DateCalculatorChildType
     */
    sat: Array<number>;
    /**
     * 
     * @type {ClubType}
     * @memberof DateCalculatorChildType
     */
    club: ClubType;
    /**
     * 
     * @type {boolean}
     * @memberof DateCalculatorChildType
     */
    is_temporary_reserved: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * name of club
     * @type {string}
     * @memberof InlineObject
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    sun?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    mon?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    tue?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    wed?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    thu?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    fri?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject1
     */
    sat?: Array<number>;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    sun?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    mon?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    tue?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    wed?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    thu?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    fri?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    sat?: Array<number>;
}
/**
 * 
 * @export
 * @interface Profiles
 */
export interface Profiles {
    /**
     * 
     * @type {number}
     * @memberof Profiles
     */
    id?: number;
    /**
     * 
     * @type {Array<Clubs>}
     * @memberof Profiles
     */
    clubs?: Array<Clubs>;
    /**
     * 
     * @type {Array<DateCalculatorChildType>}
     * @memberof Profiles
     */
    dates?: Array<DateCalculatorChildType>;
    /**
     * 
     * @type {string}
     * @memberof Profiles
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Profiles
     */
    user: number;
}
/**
 * 
 * @export
 * @interface SocialLogin
 */
export interface SocialLogin {
    /**
     * 
     * @type {string}
     * @memberof SocialLogin
     */
    access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLogin
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof SocialLogin
     */
    id_token?: string;
}

/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsKakaoCallbackList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/kakao/callback/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SocialLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsKakaoLoginFinishCreate: async (data: SocialLogin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('accountsKakaoLoginFinishCreate', 'data', data)
            const localVarPath = `/accounts/kakao/login/finish/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsKakaoLoginList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/kakao/login/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsKakaoCallbackList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsKakaoCallbackList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SocialLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsKakaoLoginFinishCreate(data: SocialLogin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SocialLogin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsKakaoLoginFinishCreate(data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsKakaoLoginList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsKakaoLoginList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsKakaoCallbackList(options?: any): AxiosPromise<void> {
            return localVarFp.accountsKakaoCallbackList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SocialLogin} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsKakaoLoginFinishCreate(data: SocialLogin, options?: any): AxiosPromise<SocialLogin> {
            return localVarFp.accountsKakaoLoginFinishCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsKakaoLoginList(options?: any): AxiosPromise<void> {
            return localVarFp.accountsKakaoLoginList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsKakaoCallbackList(options?: any) {
        return AccountsApiFp(this.configuration).accountsKakaoCallbackList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SocialLogin} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsKakaoLoginFinishCreate(data: SocialLogin, options?: any) {
        return AccountsApiFp(this.configuration).accountsKakaoLoginFinishCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountsKakaoLoginList(options?: any) {
        return AccountsApiFp(this.configuration).accountsKakaoLoginList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {InlineObject} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsCreate: async (profile: string, user: string, data: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('usersProfilesClubsCreate', 'profile', profile)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersProfilesClubsCreate', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('usersProfilesClubsCreate', 'data', data)
            const localVarPath = `/users/{user}/profiles/{profile}/clubs`
                .replace(`{${"profile"}}`, encodeURIComponent(String(profile)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} uri 
         * @param {string} user 
         * @param {InlineObject1} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsDates: async (profile: string, uri: string, user: string, data: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('usersProfilesClubsDates', 'profile', profile)
            // verify required parameter 'uri' is not null or undefined
            assertParamExists('usersProfilesClubsDates', 'uri', uri)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersProfilesClubsDates', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('usersProfilesClubsDates', 'data', data)
            const localVarPath = `/users/{user}/profiles/{profile}/clubs/{uri}`
                .replace(`{${"profile"}}`, encodeURIComponent(String(profile)))
                .replace(`{${"uri"}}`, encodeURIComponent(String(uri)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsList: async (profile: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('usersProfilesClubsList', 'profile', profile)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersProfilesClubsList', 'user', user)
            const localVarPath = `/users/{user}/profiles/{profile}/clubs`
                .replace(`{${"profile"}}`, encodeURIComponent(String(profile)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} uri 
         * @param {string} user 
         * @param {any} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsRead: async (profile: string, uri: string, user: string, group?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('usersProfilesClubsRead', 'profile', profile)
            // verify required parameter 'uri' is not null or undefined
            assertParamExists('usersProfilesClubsRead', 'uri', uri)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersProfilesClubsRead', 'user', user)
            const localVarPath = `/users/{user}/profiles/{profile}/clubs/{uri}`
                .replace(`{${"profile"}}`, encodeURIComponent(String(profile)))
                .replace(`{${"uri"}}`, encodeURIComponent(String(uri)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {InlineObject2} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesEverytimeCreate: async (profile: string, user: string, data: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('usersProfilesEverytimeCreate', 'profile', profile)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersProfilesEverytimeCreate', 'user', user)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('usersProfilesEverytimeCreate', 'data', data)
            const localVarPath = `/users/{user}/profiles/{profile}/everytime`
                .replace(`{${"profile"}}`, encodeURIComponent(String(profile)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesRead: async (profile: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profile' is not null or undefined
            assertParamExists('usersProfilesRead', 'profile', profile)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('usersProfilesRead', 'user', user)
            const localVarPath = `/users/{user}/profiles/{profile}/`
                .replace(`{${"profile"}}`, encodeURIComponent(String(profile)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profiles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {InlineObject} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersProfilesClubsCreate(profile: string, user: string, data: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClubsWithDate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersProfilesClubsCreate(profile, user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} uri 
         * @param {string} user 
         * @param {InlineObject1} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersProfilesClubsDates(profile: string, uri: string, user: string, data: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersProfilesClubsDates(profile, uri, user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersProfilesClubsList(profile: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClubsWithDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersProfilesClubsList(profile, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} uri 
         * @param {string} user 
         * @param {any} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersProfilesClubsRead(profile: string, uri: string, user: string, group?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersProfilesClubsRead(profile, uri, user, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {InlineObject2} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersProfilesEverytimeCreate(profile: string, user: string, data: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersProfilesEverytimeCreate(profile, user, data, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersProfilesRead(profile: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profiles>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersProfilesRead(profile, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeList(options?: any): AxiosPromise<Profiles> {
            return localVarFp.usersMeList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {InlineObject} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsCreate(profile: string, user: string, data: InlineObject, options?: any): AxiosPromise<ClubsWithDate> {
            return localVarFp.usersProfilesClubsCreate(profile, user, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} uri 
         * @param {string} user 
         * @param {InlineObject1} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsDates(profile: string, uri: string, user: string, data: InlineObject1, options?: any): AxiosPromise<InlineObject1> {
            return localVarFp.usersProfilesClubsDates(profile, uri, user, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsList(profile: string, user: string, options?: any): AxiosPromise<Array<ClubsWithDate>> {
            return localVarFp.usersProfilesClubsList(profile, user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} uri 
         * @param {string} user 
         * @param {any} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesClubsRead(profile: string, uri: string, user: string, group?: any, options?: any): AxiosPromise<void> {
            return localVarFp.usersProfilesClubsRead(profile, uri, user, group, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {InlineObject2} data 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesEverytimeCreate(profile: string, user: string, data: InlineObject2, options?: any): AxiosPromise<InlineObject2> {
            return localVarFp.usersProfilesEverytimeCreate(profile, user, data, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} profile 
         * @param {string} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersProfilesRead(profile: string, user: string, options?: any): AxiosPromise<Profiles> {
            return localVarFp.usersProfilesRead(profile, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeList(options?: any) {
        return UsersApiFp(this.configuration).usersMeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profile 
     * @param {string} user 
     * @param {InlineObject} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersProfilesClubsCreate(profile: string, user: string, data: InlineObject, options?: any) {
        return UsersApiFp(this.configuration).usersProfilesClubsCreate(profile, user, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profile 
     * @param {string} uri 
     * @param {string} user 
     * @param {InlineObject1} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersProfilesClubsDates(profile: string, uri: string, user: string, data: InlineObject1, options?: any) {
        return UsersApiFp(this.configuration).usersProfilesClubsDates(profile, uri, user, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profile 
     * @param {string} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersProfilesClubsList(profile: string, user: string, options?: any) {
        return UsersApiFp(this.configuration).usersProfilesClubsList(profile, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profile 
     * @param {string} uri 
     * @param {string} user 
     * @param {any} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersProfilesClubsRead(profile: string, uri: string, user: string, group?: any, options?: any) {
        return UsersApiFp(this.configuration).usersProfilesClubsRead(profile, uri, user, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profile 
     * @param {string} user 
     * @param {InlineObject2} data 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersProfilesEverytimeCreate(profile: string, user: string, data: InlineObject2, options?: any) {
        return UsersApiFp(this.configuration).usersProfilesEverytimeCreate(profile, user, data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} profile 
     * @param {string} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersProfilesRead(profile: string, user: string, options?: any) {
        return UsersApiFp(this.configuration).usersProfilesRead(profile, user, options).then((request) => request(this.axios, this.basePath));
    }
}


